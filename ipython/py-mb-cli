#!/usr/bin/env python3

""" An interactive modbus tool based on IPython. """

import argparse
import sys
from typing import Union
from pyModbusTCP.client import ModbusClient
from pyModbusTCP.utils import encode_ieee, decode_ieee, \
    long_list_to_word, word_list_to_long
# sudo apt install ipython3
from IPython import embed


# some const
HEADER_TXT = """pyModbusTCP: client interactive tool.

Use 'cli' object to interract with server (like 'cli.read_coils(0)').
Type 'exit' to quit and 'help()' for more info.
"""
HELP_TXT = """ Add help txt here. """


class CustomModbusClient(ModbusClient):
    """A ModbusClient class with float support."""

    def read_float(self, address: int, number: int = 1):
        """Read float(s) with read holding registers."""
        reg_l = self.read_holding_registers(address, number * 2)
        if reg_l:
            return [decode_ieee(f) for f in word_list_to_long(reg_l)]
        else:
            return None

    def write_float(self, address: int, values: Union[float, list]):
        """Write float(s) with write multiple registers."""
        floats_l = values if isinstance(values, (list, tuple)) else [values]
        b32_l = [encode_ieee(f) for f in floats_l]
        b16_l = long_list_to_word(b32_l)
        return self.write_multiple_registers(address, b16_l)


def help():
    print(HELP_TXT)


if __name__ == "__main__":
    # parse args
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true', help='set debug mode')
    parser.add_argument('-c', '--cmd', type=str, default='', help='command to run')
    parser.add_argument('-H', '--host', type=str, default='localhost', help='Host (default: localhost)')
    parser.add_argument('-p', '--port', type=int, default=502, help='TCP port (default: 502)')
    parser.add_argument('-u', '--unit-id', type=int, default=1, help='unit id (default: 1)')
    parser.add_argument('-t', '--timeout', type=float, default=4.0, help='timeout (default: 4.0s)')
    args = parser.parse_args()
    # init modbus client
    try:
        cli = CustomModbusClient(host=args.host, port=args.port, unit_id=args.unit_id,
                                 timeout=args.timeout, debug=args.debug)
        if args.cmd:
            # if a command is set, run it and show result
            print(eval(args.cmd))
        else:
            # when no command is set, start in interractive mode
            sys.exit(embed(banner1=HEADER_TXT, banner2='', exit_msg=''))
    except ValueError as e:
        print(e)
